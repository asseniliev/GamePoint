// <auto-generated />
using System;
using MatchScore.Data.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace MatchScore.Data.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    partial class ApplicationContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.17")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("MatchScore.Data.Models.Award", b =>
                {
                    b.Property<int>("AwardId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("EventId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<decimal>("Prize")
                        .HasColumnType("money");

                    b.Property<int>("Rank")
                        .HasColumnType("int");

                    b.HasKey("AwardId");

                    b.HasIndex("EventId");

                    b.ToTable("Awards");

                    b.HasData(
                        new
                        {
                            AwardId = 1,
                            EventId = 1,
                            IsDeleted = false,
                            Prize = 1000m,
                            Rank = 1
                        },
                        new
                        {
                            AwardId = 2,
                            EventId = 2,
                            IsDeleted = false,
                            Prize = 1000m,
                            Rank = 1
                        },
                        new
                        {
                            AwardId = 3,
                            EventId = 2,
                            IsDeleted = false,
                            Prize = 500m,
                            Rank = 2
                        },
                        new
                        {
                            AwardId = 4,
                            EventId = 3,
                            IsDeleted = false,
                            Prize = 5000m,
                            Rank = 1
                        },
                        new
                        {
                            AwardId = 5,
                            EventId = 3,
                            IsDeleted = false,
                            Prize = 2000m,
                            Rank = 2
                        });
                });

            modelBuilder.Entity("MatchScore.Data.Models.Event", b =>
                {
                    b.Property<int>("EventId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ChampionId")
                        .HasColumnType("int");

                    b.Property<int?>("DirectorId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("EventType")
                        .HasColumnType("int");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsTeamEvent")
                        .HasColumnType("bit");

                    b.Property<int>("LocationId")
                        .HasColumnType("int");

                    b.Property<int>("MatchLimitValue")
                        .HasColumnType("int");

                    b.Property<int>("ScoreForDraw")
                        .HasColumnType("int");

                    b.Property<int>("ScoreForWin")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("matchType")
                        .HasColumnType("int");

                    b.HasKey("EventId");

                    b.HasIndex("ChampionId");

                    b.HasIndex("DirectorId");

                    b.HasIndex("LocationId");

                    b.ToTable("Events");

                    b.HasData(
                        new
                        {
                            EventId = 1,
                            DirectorId = 1,
                            EndDate = new DateTime(2023, 1, 13, 19, 56, 18, 611, DateTimeKind.Local).AddTicks(3040),
                            EventType = 0,
                            IsCompleted = false,
                            IsDeleted = false,
                            IsTeamEvent = false,
                            LocationId = 1,
                            MatchLimitValue = 0,
                            ScoreForDraw = 0,
                            ScoreForWin = 0,
                            StartDate = new DateTime(2022, 12, 14, 19, 56, 18, 611, DateTimeKind.Local).AddTicks(2890),
                            Title = "Single Match Event",
                            matchType = 0
                        },
                        new
                        {
                            EventId = 2,
                            DirectorId = 2,
                            EndDate = new DateTime(2023, 3, 14, 19, 56, 18, 611, DateTimeKind.Local).AddTicks(3550),
                            EventType = 2,
                            IsCompleted = false,
                            IsDeleted = false,
                            IsTeamEvent = true,
                            LocationId = 2,
                            MatchLimitValue = 0,
                            ScoreForDraw = 1,
                            ScoreForWin = 2,
                            StartDate = new DateTime(2022, 12, 14, 19, 56, 18, 611, DateTimeKind.Local).AddTicks(3540),
                            Title = "League",
                            matchType = 0
                        },
                        new
                        {
                            EventId = 3,
                            DirectorId = 2,
                            EndDate = new DateTime(2023, 3, 14, 19, 56, 18, 611, DateTimeKind.Local).AddTicks(3790),
                            EventType = 1,
                            IsCompleted = false,
                            IsDeleted = false,
                            IsTeamEvent = true,
                            LocationId = 3,
                            MatchLimitValue = 0,
                            ScoreForDraw = 0,
                            ScoreForWin = 0,
                            StartDate = new DateTime(2022, 12, 14, 19, 56, 18, 611, DateTimeKind.Local).AddTicks(3790),
                            Title = "Knockout Event",
                            matchType = 0
                        });
                });

            modelBuilder.Entity("MatchScore.Data.Models.Location", b =>
                {
                    b.Property<int>("LocationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Country")
                        .HasColumnType("int");

                    b.Property<string>("Latitude")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Longitude")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LocationId");

                    b.ToTable("Locations");

                    b.HasData(
                        new
                        {
                            LocationId = 1,
                            City = "Sofia",
                            Country = 35,
                            Latitude = "42.6977",
                            Longitude = "23.3219"
                        },
                        new
                        {
                            LocationId = 2,
                            City = "Chicago",
                            Country = 236,
                            Latitude = "41.8781",
                            Longitude = "-87.6298"
                        },
                        new
                        {
                            LocationId = 3,
                            City = "London",
                            Country = 235,
                            Latitude = "51.5072",
                            Longitude = "-0.1276"
                        },
                        new
                        {
                            LocationId = 4,
                            City = "Lyon",
                            Country = 76,
                            Latitude = "45.7594",
                            Longitude = "4.8290"
                        });
                });

            modelBuilder.Entity("MatchScore.Data.Models.Match", b =>
                {
                    b.Property<int>("MatchId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("EventId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("LocationId")
                        .HasColumnType("int");

                    b.HasKey("MatchId");

                    b.HasIndex("EventId");

                    b.HasIndex("LocationId");

                    b.ToTable("Matches");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Match");
                });

            modelBuilder.Entity("MatchScore.Data.Models.Player", b =>
                {
                    b.Property<int>("PlayerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("Country")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsInactive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsTeam")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<byte[]>("Photo")
                        .HasColumnType("varbinary(max)");

                    b.Property<int?>("SportsClubId")
                        .HasColumnType("int");

                    b.HasKey("PlayerId");

                    b.HasIndex("SportsClubId");

                    b.ToTable("Players");

                    b.HasData(
                        new
                        {
                            PlayerId = 1,
                            Country = 35,
                            IsDeleted = false,
                            IsInactive = false,
                            IsTeam = true,
                            Name = "Cherno more",
                            SportsClubId = 1
                        },
                        new
                        {
                            PlayerId = 2,
                            Country = 236,
                            IsDeleted = false,
                            IsInactive = false,
                            IsTeam = true,
                            Name = "Chicago Bulls",
                            SportsClubId = 2
                        },
                        new
                        {
                            PlayerId = 3,
                            Country = 235,
                            IsDeleted = false,
                            IsInactive = false,
                            IsTeam = true,
                            Name = "Aston Villa",
                            SportsClubId = 3
                        },
                        new
                        {
                            PlayerId = 4,
                            Country = 76,
                            IsDeleted = false,
                            IsInactive = false,
                            IsTeam = true,
                            Name = "Olympique Lyonnais",
                            SportsClubId = 4
                        },
                        new
                        {
                            PlayerId = 5,
                            Country = 35,
                            IsDeleted = false,
                            IsInactive = false,
                            IsTeam = false,
                            Name = "Grigor Dimitrov",
                            SportsClubId = 3
                        },
                        new
                        {
                            PlayerId = 6,
                            Country = 236,
                            IsDeleted = false,
                            IsInactive = false,
                            IsTeam = false,
                            Name = "Andre Agassi",
                            SportsClubId = 4
                        });
                });

            modelBuilder.Entity("MatchScore.Data.Models.Ranking", b =>
                {
                    b.Property<int>("PlayerId")
                        .HasColumnType("int");

                    b.Property<int>("EventId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("Rank")
                        .HasColumnType("int");

                    b.HasKey("PlayerId", "EventId");

                    b.HasIndex("EventId");

                    b.ToTable("Rankings");

                    b.HasData(
                        new
                        {
                            PlayerId = 5,
                            EventId = 1,
                            IsDeleted = false,
                            Rank = 0
                        },
                        new
                        {
                            PlayerId = 6,
                            EventId = 1,
                            IsDeleted = false,
                            Rank = 0
                        },
                        new
                        {
                            PlayerId = 1,
                            EventId = 2,
                            IsDeleted = false,
                            Rank = 0
                        },
                        new
                        {
                            PlayerId = 2,
                            EventId = 2,
                            IsDeleted = false,
                            Rank = 0
                        },
                        new
                        {
                            PlayerId = 3,
                            EventId = 2,
                            IsDeleted = false,
                            Rank = 0
                        },
                        new
                        {
                            PlayerId = 4,
                            EventId = 2,
                            IsDeleted = false,
                            Rank = 0
                        },
                        new
                        {
                            PlayerId = 1,
                            EventId = 3,
                            IsDeleted = false,
                            Rank = 0
                        },
                        new
                        {
                            PlayerId = 2,
                            EventId = 3,
                            IsDeleted = false,
                            Rank = 0
                        },
                        new
                        {
                            PlayerId = 3,
                            EventId = 3,
                            IsDeleted = false,
                            Rank = 0
                        },
                        new
                        {
                            PlayerId = 4,
                            EventId = 3,
                            IsDeleted = false,
                            Rank = 0
                        });
                });

            modelBuilder.Entity("MatchScore.Data.Models.Request", b =>
                {
                    b.Property<int>("RequestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("PlayerId")
                        .HasColumnType("int");

                    b.Property<int>("RequestStatus")
                        .HasColumnType("int");

                    b.Property<int>("RequestType")
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("RequestId");

                    b.HasIndex("PlayerId");

                    b.HasIndex("UserId");

                    b.ToTable("Requests");
                });

            modelBuilder.Entity("MatchScore.Data.Models.Score", b =>
                {
                    b.Property<int>("MatchId")
                        .HasColumnType("int");

                    b.Property<int>("PlayerId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<double?>("PlayerScore")
                        .HasColumnType("float");

                    b.Property<int>("Round")
                        .HasColumnType("int");

                    b.Property<int>("ScoredPoints")
                        .HasColumnType("int");

                    b.HasKey("MatchId", "PlayerId");

                    b.HasIndex("PlayerId");

                    b.ToTable("Scores");

                    b.HasData(
                        new
                        {
                            MatchId = 1,
                            PlayerId = 5,
                            IsDeleted = false,
                            Round = 1,
                            ScoredPoints = 0
                        },
                        new
                        {
                            MatchId = 1,
                            PlayerId = 6,
                            IsDeleted = false,
                            Round = 1,
                            ScoredPoints = 0
                        },
                        new
                        {
                            MatchId = 2,
                            PlayerId = 1,
                            IsDeleted = false,
                            Round = 1,
                            ScoredPoints = 0
                        },
                        new
                        {
                            MatchId = 2,
                            PlayerId = 3,
                            IsDeleted = false,
                            Round = 1,
                            ScoredPoints = 0
                        },
                        new
                        {
                            MatchId = 3,
                            PlayerId = 2,
                            IsDeleted = false,
                            Round = 1,
                            ScoredPoints = 0
                        },
                        new
                        {
                            MatchId = 3,
                            PlayerId = 4,
                            IsDeleted = false,
                            Round = 1,
                            ScoredPoints = 0
                        },
                        new
                        {
                            MatchId = 4,
                            PlayerId = 1,
                            IsDeleted = false,
                            Round = 2,
                            ScoredPoints = 0
                        },
                        new
                        {
                            MatchId = 4,
                            PlayerId = 2,
                            IsDeleted = false,
                            Round = 2,
                            ScoredPoints = 0
                        },
                        new
                        {
                            MatchId = 5,
                            PlayerId = 3,
                            IsDeleted = false,
                            Round = 2,
                            ScoredPoints = 0
                        },
                        new
                        {
                            MatchId = 5,
                            PlayerId = 4,
                            IsDeleted = false,
                            Round = 2,
                            ScoredPoints = 0
                        },
                        new
                        {
                            MatchId = 6,
                            PlayerId = 1,
                            IsDeleted = false,
                            Round = 3,
                            ScoredPoints = 0
                        },
                        new
                        {
                            MatchId = 6,
                            PlayerId = 4,
                            IsDeleted = false,
                            Round = 3,
                            ScoredPoints = 0
                        },
                        new
                        {
                            MatchId = 7,
                            PlayerId = 2,
                            IsDeleted = false,
                            Round = 3,
                            ScoredPoints = 0
                        },
                        new
                        {
                            MatchId = 7,
                            PlayerId = 3,
                            IsDeleted = false,
                            Round = 3,
                            ScoredPoints = 0
                        },
                        new
                        {
                            MatchId = 8,
                            PlayerId = 2,
                            IsDeleted = false,
                            Round = 4,
                            ScoredPoints = 0
                        },
                        new
                        {
                            MatchId = 8,
                            PlayerId = 1,
                            IsDeleted = false,
                            Round = 4,
                            ScoredPoints = 0
                        },
                        new
                        {
                            MatchId = 9,
                            PlayerId = 4,
                            IsDeleted = false,
                            Round = 4,
                            ScoredPoints = 0
                        },
                        new
                        {
                            MatchId = 9,
                            PlayerId = 3,
                            IsDeleted = false,
                            Round = 4,
                            ScoredPoints = 0
                        },
                        new
                        {
                            MatchId = 10,
                            PlayerId = 3,
                            IsDeleted = false,
                            Round = 5,
                            ScoredPoints = 0
                        },
                        new
                        {
                            MatchId = 10,
                            PlayerId = 1,
                            IsDeleted = false,
                            Round = 5,
                            ScoredPoints = 0
                        },
                        new
                        {
                            MatchId = 11,
                            PlayerId = 4,
                            IsDeleted = false,
                            Round = 5,
                            ScoredPoints = 0
                        },
                        new
                        {
                            MatchId = 11,
                            PlayerId = 2,
                            IsDeleted = false,
                            Round = 5,
                            ScoredPoints = 0
                        },
                        new
                        {
                            MatchId = 12,
                            PlayerId = 3,
                            IsDeleted = false,
                            Round = 6,
                            ScoredPoints = 0
                        },
                        new
                        {
                            MatchId = 12,
                            PlayerId = 2,
                            IsDeleted = false,
                            Round = 6,
                            ScoredPoints = 0
                        },
                        new
                        {
                            MatchId = 13,
                            PlayerId = 4,
                            IsDeleted = false,
                            Round = 6,
                            ScoredPoints = 0
                        },
                        new
                        {
                            MatchId = 13,
                            PlayerId = 1,
                            IsDeleted = false,
                            Round = 6,
                            ScoredPoints = 0
                        },
                        new
                        {
                            MatchId = 14,
                            PlayerId = 1,
                            IsDeleted = false,
                            Round = 0,
                            ScoredPoints = 0
                        },
                        new
                        {
                            MatchId = 14,
                            PlayerId = 2,
                            IsDeleted = false,
                            Round = 0,
                            ScoredPoints = 0
                        },
                        new
                        {
                            MatchId = 15,
                            PlayerId = 3,
                            IsDeleted = false,
                            Round = 0,
                            ScoredPoints = 0
                        },
                        new
                        {
                            MatchId = 15,
                            PlayerId = 4,
                            IsDeleted = false,
                            Round = 0,
                            ScoredPoints = 0
                        });
                });

            modelBuilder.Entity("MatchScore.Data.Models.SportsClub", b =>
                {
                    b.Property<int>("SportsClubId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.HasKey("SportsClubId");

                    b.ToTable("SportsClubs");

                    b.HasData(
                        new
                        {
                            SportsClubId = 1,
                            IsDeleted = false,
                            Name = "Cherno more"
                        },
                        new
                        {
                            SportsClubId = 2,
                            IsDeleted = false,
                            Name = "Chicago Bulls"
                        },
                        new
                        {
                            SportsClubId = 3,
                            IsDeleted = false,
                            Name = "Aston Villa"
                        },
                        new
                        {
                            SportsClubId = 4,
                            IsDeleted = false,
                            Name = "Olympique Lionnais"
                        });
                });

            modelBuilder.Entity("MatchScore.Data.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsInactive")
                        .HasColumnType("bit");

                    b.Property<byte[]>("PasswordHash")
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .HasColumnType("varbinary(max)");

                    b.Property<int?>("PlayerId")
                        .HasColumnType("int");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.HasIndex("PlayerId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            CreatedOn = new DateTime(2022, 11, 17, 14, 4, 24, 0, DateTimeKind.Unspecified),
                            Email = "ivan@mail.com",
                            IsDeleted = false,
                            IsInactive = false,
                            PasswordHash = new byte[] { 108, 192, 45, 62, 73, 159, 192, 211, 58, 70, 124, 245, 54, 203, 100, 32, 67, 137, 219, 133, 97, 141, 69, 97, 251, 97, 247, 227, 180, 6, 142, 54, 254, 206, 93, 240, 90, 222, 77, 64, 105, 102, 241, 206, 169, 120, 206, 252, 91, 7, 229, 228, 247, 108, 226, 193, 118, 243, 4, 107, 147, 27, 30, 131 },
                            PasswordSalt = new byte[] { 138, 247, 160, 96, 158, 70, 114, 146, 56, 44, 33, 155, 112, 12, 61, 129, 220, 241, 205, 251, 4, 51, 177, 100, 208, 147, 110, 195, 255, 152, 65, 148, 73, 134, 48, 80, 178, 109, 119, 27, 246, 140, 47, 226, 107, 32, 3, 79, 33, 188, 11, 243, 62, 220, 167, 34, 19, 33, 152, 204, 25, 156, 130, 58, 37, 10, 193, 125, 117, 2, 183, 209, 68, 199, 201, 64, 241, 69, 27, 226, 77, 57, 77, 244, 7, 76, 134, 166, 122, 2, 77, 131, 132, 129, 211, 138, 177, 16, 121, 152, 47, 205, 90, 204, 65, 105, 129, 76, 215, 191, 232, 136, 12, 145, 156, 76, 177, 66, 50, 109, 240, 244, 164, 26, 0, 190, 143, 66 },
                            Role = 0,
                            Username = "ivan"
                        },
                        new
                        {
                            UserId = 2,
                            CreatedOn = new DateTime(2022, 11, 17, 14, 4, 24, 0, DateTimeKind.Unspecified),
                            Email = "asen@mail.com",
                            IsDeleted = false,
                            IsInactive = false,
                            PasswordHash = new byte[] { 58, 13, 140, 63, 107, 184, 87, 97, 28, 47, 135, 106, 16, 187, 90, 154, 83, 241, 61, 26, 14, 176, 35, 181, 99, 126, 224, 37, 110, 220, 149, 0, 222, 88, 226, 10, 60, 205, 26, 235, 252, 237, 54, 73, 2, 91, 63, 81, 232, 134, 119, 64, 33, 1, 107, 185, 84, 172, 187, 78, 73, 23, 114, 26 },
                            PasswordSalt = new byte[] { 130, 177, 149, 43, 123, 85, 231, 73, 219, 244, 76, 240, 42, 126, 140, 131, 39, 169, 129, 156, 226, 124, 164, 55, 62, 6, 116, 171, 106, 92, 76, 217, 115, 177, 89, 156, 78, 111, 131, 46, 131, 126, 121, 187, 70, 21, 3, 13, 46, 241, 14, 99, 1, 189, 159, 35, 125, 247, 1, 215, 122, 168, 235, 218, 233, 170, 222, 199, 101, 234, 202, 68, 105, 191, 140, 237, 147, 228, 54, 17, 216, 192, 109, 42, 233, 215, 76, 5, 253, 133, 161, 23, 227, 3, 188, 10, 0, 89, 122, 20, 121, 146, 158, 110, 132, 183, 13, 127, 6, 149, 27, 55, 84, 73, 101, 159, 51, 239, 236, 155, 214, 206, 2, 33, 8, 248, 60, 210 },
                            Role = 1,
                            Username = "asen"
                        },
                        new
                        {
                            UserId = 3,
                            CreatedOn = new DateTime(2022, 11, 17, 14, 4, 24, 0, DateTimeKind.Unspecified),
                            Email = "toto@mail.com",
                            IsDeleted = false,
                            IsInactive = false,
                            PasswordHash = new byte[] { 98, 89, 218, 235, 156, 95, 129, 229, 49, 100, 33, 169, 230, 126, 106, 88, 223, 213, 249, 118, 102, 75, 158, 192, 27, 15, 105, 47, 66, 137, 196, 46, 54, 134, 126, 73, 46, 96, 125, 35, 212, 148, 19, 87, 29, 3, 237, 180, 151, 27, 105, 150, 52, 40, 39, 101, 161, 4, 180, 33, 108, 215, 187, 189 },
                            PasswordSalt = new byte[] { 14, 21, 249, 59, 177, 92, 172, 134, 2, 156, 133, 37, 78, 232, 199, 155, 43, 91, 157, 157, 169, 59, 15, 89, 215, 72, 195, 244, 72, 133, 104, 244, 64, 87, 90, 59, 62, 90, 255, 231, 1, 137, 239, 44, 197, 0, 17, 17, 47, 48, 1, 138, 4, 179, 39, 159, 173, 234, 244, 9, 58, 198, 31, 106, 33, 193, 46, 145, 101, 64, 178, 211, 197, 129, 176, 176, 211, 194, 16, 218, 215, 143, 123, 204, 216, 111, 234, 3, 103, 50, 44, 43, 22, 162, 124, 214, 230, 255, 175, 234, 168, 146, 31, 86, 57, 163, 15, 12, 228, 198, 251, 61, 191, 213, 247, 106, 156, 249, 143, 214, 226, 153, 22, 164, 139, 54, 47, 248 },
                            Role = 1,
                            Username = "toto"
                        });
                });

            modelBuilder.Entity("MatchScore.Data.Models.ScoreLimitedMatch", b =>
                {
                    b.HasBaseType("MatchScore.Data.Models.Match");

                    b.Property<int>("MatchScoreLimit")
                        .HasColumnType("int");

                    b.HasDiscriminator().HasValue("ScoreLimitedMatch");

                    b.HasData(
                        new
                        {
                            MatchId = 1,
                            Date = new DateTime(2022, 12, 14, 19, 56, 18, 604, DateTimeKind.Local).AddTicks(5020),
                            EventId = 1,
                            IsDeleted = false,
                            LocationId = 1,
                            MatchScoreLimit = 6
                        });
                });

            modelBuilder.Entity("MatchScore.Data.Models.TimeLimitedMatch", b =>
                {
                    b.HasBaseType("MatchScore.Data.Models.Match");

                    b.Property<int>("MatchTimeLimit")
                        .HasColumnType("int");

                    b.Property<int>("PlayerTimeLimit")
                        .HasColumnType("int");

                    b.HasDiscriminator().HasValue("TimeLimitedMatch");

                    b.HasData(
                        new
                        {
                            MatchId = 2,
                            Date = new DateTime(2022, 12, 17, 19, 56, 18, 610, DateTimeKind.Local).AddTicks(9840),
                            EventId = 2,
                            IsDeleted = false,
                            LocationId = 1,
                            MatchTimeLimit = 90,
                            PlayerTimeLimit = 0
                        },
                        new
                        {
                            MatchId = 3,
                            Date = new DateTime(2022, 12, 22, 19, 56, 18, 611, DateTimeKind.Local).AddTicks(30),
                            EventId = 2,
                            IsDeleted = false,
                            LocationId = 2,
                            MatchTimeLimit = 90,
                            PlayerTimeLimit = 0
                        },
                        new
                        {
                            MatchId = 4,
                            Date = new DateTime(2022, 12, 24, 19, 56, 18, 611, DateTimeKind.Local).AddTicks(40),
                            EventId = 2,
                            IsDeleted = false,
                            LocationId = 3,
                            MatchTimeLimit = 90,
                            PlayerTimeLimit = 0
                        },
                        new
                        {
                            MatchId = 5,
                            Date = new DateTime(2022, 12, 26, 19, 56, 18, 611, DateTimeKind.Local).AddTicks(40),
                            EventId = 2,
                            IsDeleted = false,
                            LocationId = 4,
                            MatchTimeLimit = 90,
                            PlayerTimeLimit = 0
                        },
                        new
                        {
                            MatchId = 6,
                            Date = new DateTime(2022, 12, 16, 19, 56, 18, 611, DateTimeKind.Local).AddTicks(40),
                            EventId = 2,
                            IsDeleted = false,
                            LocationId = 2,
                            MatchTimeLimit = 90,
                            PlayerTimeLimit = 0
                        },
                        new
                        {
                            MatchId = 7,
                            Date = new DateTime(2022, 12, 17, 19, 56, 18, 611, DateTimeKind.Local).AddTicks(50),
                            EventId = 2,
                            IsDeleted = false,
                            LocationId = 1,
                            MatchTimeLimit = 90,
                            PlayerTimeLimit = 0
                        },
                        new
                        {
                            MatchId = 8,
                            Date = new DateTime(2022, 12, 17, 19, 56, 18, 611, DateTimeKind.Local).AddTicks(50),
                            EventId = 2,
                            IsDeleted = false,
                            LocationId = 1,
                            MatchTimeLimit = 90,
                            PlayerTimeLimit = 0
                        },
                        new
                        {
                            MatchId = 9,
                            Date = new DateTime(2022, 12, 17, 19, 56, 18, 611, DateTimeKind.Local).AddTicks(50),
                            EventId = 2,
                            IsDeleted = false,
                            LocationId = 1,
                            MatchTimeLimit = 90,
                            PlayerTimeLimit = 0
                        },
                        new
                        {
                            MatchId = 10,
                            Date = new DateTime(2022, 12, 17, 19, 56, 18, 611, DateTimeKind.Local).AddTicks(50),
                            EventId = 2,
                            IsDeleted = false,
                            LocationId = 1,
                            MatchTimeLimit = 90,
                            PlayerTimeLimit = 0
                        },
                        new
                        {
                            MatchId = 11,
                            Date = new DateTime(2022, 12, 17, 19, 56, 18, 611, DateTimeKind.Local).AddTicks(60),
                            EventId = 2,
                            IsDeleted = false,
                            LocationId = 1,
                            MatchTimeLimit = 90,
                            PlayerTimeLimit = 0
                        },
                        new
                        {
                            MatchId = 12,
                            Date = new DateTime(2022, 12, 17, 19, 56, 18, 611, DateTimeKind.Local).AddTicks(60),
                            EventId = 2,
                            IsDeleted = false,
                            LocationId = 1,
                            MatchTimeLimit = 90,
                            PlayerTimeLimit = 0
                        },
                        new
                        {
                            MatchId = 13,
                            Date = new DateTime(2022, 12, 17, 19, 56, 18, 611, DateTimeKind.Local).AddTicks(60),
                            EventId = 2,
                            IsDeleted = false,
                            LocationId = 1,
                            MatchTimeLimit = 90,
                            PlayerTimeLimit = 0
                        },
                        new
                        {
                            MatchId = 14,
                            Date = new DateTime(2022, 12, 18, 19, 56, 18, 611, DateTimeKind.Local).AddTicks(60),
                            EventId = 3,
                            IsDeleted = false,
                            LocationId = 4,
                            MatchTimeLimit = 90,
                            PlayerTimeLimit = 0
                        },
                        new
                        {
                            MatchId = 15,
                            Date = new DateTime(2022, 12, 22, 19, 56, 18, 611, DateTimeKind.Local).AddTicks(70),
                            EventId = 3,
                            IsDeleted = false,
                            LocationId = 2,
                            MatchTimeLimit = 90,
                            PlayerTimeLimit = 0
                        },
                        new
                        {
                            MatchId = 16,
                            Date = new DateTime(2022, 12, 22, 19, 56, 18, 611, DateTimeKind.Local).AddTicks(70),
                            EventId = 3,
                            IsDeleted = false,
                            LocationId = 1,
                            MatchTimeLimit = 90,
                            PlayerTimeLimit = 0
                        });
                });

            modelBuilder.Entity("MatchScore.Data.Models.Award", b =>
                {
                    b.HasOne("MatchScore.Data.Models.Event", "Event")
                        .WithMany("Awards")
                        .HasForeignKey("EventId");

                    b.Navigation("Event");
                });

            modelBuilder.Entity("MatchScore.Data.Models.Event", b =>
                {
                    b.HasOne("MatchScore.Data.Models.Player", "Champion")
                        .WithMany()
                        .HasForeignKey("ChampionId");

                    b.HasOne("MatchScore.Data.Models.User", "Director")
                        .WithMany("Events")
                        .HasForeignKey("DirectorId");

                    b.HasOne("MatchScore.Data.Models.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Champion");

                    b.Navigation("Director");

                    b.Navigation("Location");
                });

            modelBuilder.Entity("MatchScore.Data.Models.Match", b =>
                {
                    b.HasOne("MatchScore.Data.Models.Event", "Event")
                        .WithMany("Matches")
                        .HasForeignKey("EventId");

                    b.HasOne("MatchScore.Data.Models.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("Location");
                });

            modelBuilder.Entity("MatchScore.Data.Models.Player", b =>
                {
                    b.HasOne("MatchScore.Data.Models.SportsClub", "SportsClub")
                        .WithMany("Players")
                        .HasForeignKey("SportsClubId");

                    b.Navigation("SportsClub");
                });

            modelBuilder.Entity("MatchScore.Data.Models.Ranking", b =>
                {
                    b.HasOne("MatchScore.Data.Models.Event", "Event")
                        .WithMany("Ranking")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MatchScore.Data.Models.Player", "Player")
                        .WithMany("Rankings")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("MatchScore.Data.Models.Request", b =>
                {
                    b.HasOne("MatchScore.Data.Models.Player", "Player")
                        .WithMany()
                        .HasForeignKey("PlayerId");

                    b.HasOne("MatchScore.Data.Models.User", "User")
                        .WithMany("Requests")
                        .HasForeignKey("UserId");

                    b.Navigation("Player");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MatchScore.Data.Models.Score", b =>
                {
                    b.HasOne("MatchScore.Data.Models.Match", "Match")
                        .WithMany("Scores")
                        .HasForeignKey("MatchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MatchScore.Data.Models.Player", "Player")
                        .WithMany("Scores")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Match");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("MatchScore.Data.Models.User", b =>
                {
                    b.HasOne("MatchScore.Data.Models.Player", "Player")
                        .WithMany()
                        .HasForeignKey("PlayerId");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("MatchScore.Data.Models.Event", b =>
                {
                    b.Navigation("Awards");

                    b.Navigation("Matches");

                    b.Navigation("Ranking");
                });

            modelBuilder.Entity("MatchScore.Data.Models.Match", b =>
                {
                    b.Navigation("Scores");
                });

            modelBuilder.Entity("MatchScore.Data.Models.Player", b =>
                {
                    b.Navigation("Rankings");

                    b.Navigation("Scores");
                });

            modelBuilder.Entity("MatchScore.Data.Models.SportsClub", b =>
                {
                    b.Navigation("Players");
                });

            modelBuilder.Entity("MatchScore.Data.Models.User", b =>
                {
                    b.Navigation("Events");

                    b.Navigation("Requests");
                });
#pragma warning restore 612, 618
        }
    }
}
